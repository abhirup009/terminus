# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Terminus build

on:
  push:
    branches:
      - master
  pull_request:

permissions:
  contents: read

jobs:
  build:
    name: Build Terminus project
    runs-on: ubuntu-latest

    steps:
      - name: Checkout to repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'
          cache: 'gradle'

      - name: Run Build
        run: ./gradlew clean build --info --full-stacktrace

  push:
    name: Package and push Docker image to DockerHub
    runs-on: ubuntu-latest
#    if: ${{ github.event_name == 'push' }}
    env:
      COMMIT_SHA: ${{ github.sha }}
      CONTAINER_NAME: terminus
    steps:
      - name: Set short git commit SHA
        id: vars
        run: |
          calculatedSha=$(git rev-parse --short ${{ github.sha }})
          echo "::set-output name=short_sha::$calculatedSha"

      - name: Confirm git commit SHA output
        run: echo ${{ steps.vars.outputs.short_sha }}

      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'
          cache: 'gradle'

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        run: |
          ./gradlew clean build jibDockerBuild
          docker tag $CONTAINER_NAME ${{ secrets.DOCKERHUB_USERNAME }}/$CONTAINER_NAME:latest 
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/$CONTAINER_NAME:latest

      - name: Logout of Docker Hub
        if: always()
        run: docker logout
